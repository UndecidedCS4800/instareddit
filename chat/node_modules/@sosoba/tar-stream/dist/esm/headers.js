const addLength = function (str) {
    const len = Buffer.byteLength(str);
    let digits = Math.floor(Math.log(len) / Math.log(10)) + 1;
    if (len + digits >= Math.pow(10, digits)) {
        digits++;
    }
    return `${len + digits}${str}`;
};
export const encodePaxData = (opts) => Buffer.from(Object.entries(opts).map(([k, v]) => addLength(` ${k}=${v}\n`)).join(''));
export const TYPE_FLAG_REGTYPE = '0';
export const TYPE_FLAG_PAX = 'x';
const NAME_MAX_LENGTH = 100;
const SEP_AND_NAME_MAX_LENGTH = NAME_MAX_LENGTH + 1;
const PREFIX_MAX_LENGTH = 155;
const PREFIX_AND_SEP_AND_NAME_MAX_LENGTH = PREFIX_MAX_LENGTH + SEP_AND_NAME_MAX_LENGTH;
export const splitName = (name) => {
    if (name.length <= NAME_MAX_LENGTH) {
        return { name };
    }
    if (name.length <= PREFIX_AND_SEP_AND_NAME_MAX_LENGTH) {
        const i = name.indexOf('/', name.length - SEP_AND_NAME_MAX_LENGTH);
        if (i > 0 && i <= PREFIX_MAX_LENGTH) {
            return {
                prefix: name.substring(0, i),
                name: name.substring(i + 1),
            };
        }
    }
};
export const TAR_BLOCK_SIZE = 512;
const magic = 'ustar';
const version = '00';
export const encodeTarHeader = (opts) => {
    const buf = Buffer.alloc(TAR_BLOCK_SIZE);
    const text = (str, offset, length) => {
        if (str) {
            if (buf.write(str, offset, length, 'latin1') > length) {
                throw new Error(JSON.stringify({ str, offset, length, strLength: str.length }));
            }
        }
    };
    const numeric = (value, offset, length, addNull) => {
        if (value !== undefined) {
            const octal = value.toString(8).padStart(length - 1 - (addNull ? 1 : 0), '0');
            if (octal.length > length) {
                throw new Error(JSON.stringify({ value, offset, length, addNull, octal }));
            }
            buf.write(octal + ' ', offset, 'latin1');
        }
    };
    text(opts.name, 0, NAME_MAX_LENGTH);
    numeric(opts.mode, 100, 8, true);
    numeric(opts.uid, 108, 8, true);
    numeric(opts.gid, 116, 8, true);
    numeric(opts.size, 124, 12, false);
    numeric(opts.mtime, 136, 12, false);
    text(opts.typeflag, 156, 1);
    text(opts.linkname, 157, 100);
    text(magic, 257, 6);
    buf.write(version, 263, 'latin1');
    text(opts.uname, 265, 32);
    text(opts.gname, 297, 32);
    numeric(opts.devmajor, 329, 8, true);
    numeric(opts.devminor, 337, 8, true);
    text(opts.prefix, 345, PREFIX_MAX_LENGTH);
    const cksum = 256 + buf.reduce((tot, v) => tot + v);
    numeric(cksum, 148, 8, true);
    return buf;
};
export const parseTarHeader = (header) => {
    const text = (offset, length) => header.toString('latin1', offset, offset + length).replace(/\0+$/, '') || undefined;
    const octal = (offset, length) => {
        const str = text(offset, length);
        if (!str) {
            return;
        }
        return parseInt(str, 8);
    };
    return {
        text: text(0, 100),
        typeflag: text(156, 1),
        prefix: text(345, 155),
        size: octal(124, 12),
    };
};
//# sourceMappingURL=headers.js.map